import java.io.*;
import java.util.*;

public class Bank {
	Map<String, BankAccount> acc = null;
	
	public Bank() {
		acc = new HashMap<>();
	}

	public BankAccount getAccount(String id) throws NonExistingBankAccountException{
		if(!acc.containsKey(id)){
			throw new NonExistingBankAccountException();
		}
		
		return acc.get(id);
	}
	
	public void setAccount(BankAccount account){
		acc.put(account.getId(), account);
	}
	
	public void transfer(String usrId, String destId, double sum) throws InsufficientFundsException{
		acc.get(usrId).withdraw(sum);
		acc.get(destId).add(sum);
	}
	
	public static void saveAccount(BankAccount account) throws IOException {
        File dir = new File("info/");
        if (!dir.exists()) {
            dir.mkdirs();
        }
        
        ObjectOutputStream obj = null;

        try {
            obj = new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream("info/" + account.getId() + ".ser")));
            obj.writeObject(account);
        } finally {
            if (obj != null) {
                obj.close();
            }
        }
    }
	
	public static Bank loadAccounts(Bank bank) throws IOException {
        File dir = new File("info/");
        
        if (!dir.exists()) {
            return bank;
        }

        String[] accountPaths = dir.list();
        ObjectInputStream obj = null;
        
        try {
            for (String accountPath : accountPaths) {
            	System.out.println(accountPath);
                obj = new ObjectInputStream(new BufferedInputStream(new FileInputStream("info/" + accountPath)));
                BankAccount account = (BankAccount) obj.readObject();
                bank.setAccount(account);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }finally {
			if(obj != null){
				obj.close();
			}
		}
        
        return bank;
    }
}
