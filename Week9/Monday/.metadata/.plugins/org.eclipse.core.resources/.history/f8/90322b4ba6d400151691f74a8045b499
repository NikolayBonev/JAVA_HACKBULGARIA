import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.locks.*;

public class BlockingQueue<E> {
	private Queue<E> queue = null;
	private int capacity = 0;
	
	private Lock lock = null;
	
	public BlockingQueue(int capacity) {
		if(capacity > 0){
			this.capacity = capacity;
		}
		
		this.lock = new ReentrantLock();
		this.queue = new LinkedList<E>();
	}
	
	public void add(E element) throws InterruptedException{
		offer(element);
	}
	
	public void offer(E element) throws InterruptedException{
		lock.lock();
		
		while(queue.size() >= capacity){
			lock.wait();
		}
		
		queue.add(element);
		
		lock.unlock();
	}
	
	public E poll(){
		lock.lock();
		
		while(queue.size() == 0){
			
		}
		if(queue.size() > 0){
			return queue.poll();
		}
		
		return null;
	}
	
	public E remove(){
		if(queue.size() > 0){
			return poll();
		}
		
		return null;
	}
}
