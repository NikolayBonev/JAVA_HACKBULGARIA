import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.locks.*;

public class BlockingQueue<E> {
	private Queue<E> queue = null;
	private int capacity = 0;
	
	private final Lock lock;
	private final boolean notFull;
	private final boolean notEmpty;
	
	public BlockingQueue(int capacity) {
		if(capacity > 0){
			this.capacity = capacity;
		}
		
		this.lock = new ReentrantLock();
		this.queue = new LinkedList<E>();
	}
	
	public void add(E element) throws InterruptedException {
		offer(element);
	}
	
	public void offer(E element) throws InterruptedException {
		lock.lock();
		
		try {
			while(queue.size() >= capacity){
				lock.wait();
			}
		} finally {
			queue.add(element);
			lock.unlock();
		}
	}
	
	@SuppressWarnings("finally")
	public E poll() throws InterruptedException{
		lock.lock();
		
		try {
			while(queue.size() == 0){
				lock.wait();
			}
		} finally {
			return queue.poll();
		}
	}
	
	public E remove() throws InterruptedException{
		return poll();
	}
	
	public int size(){
		return queue.size();
	}
}
